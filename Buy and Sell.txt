//Buy and Sell Stock
//problem 1:with one transaction maximum profit
//prices = [7,1,5,3,6,4]
//Output: 5
//Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
//Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

//approcah:1 using 2 loop ,outer for the buy and inner for the sell[TC:O(n2), SC:O(1)]

  int maxProfit(vector<int>& prices) 
  {
  int maxProfit=0;
    for(int i=0;i<prices.size();i++){
        for(int j=i+1;j<prices.size();j++)
        {
            maxProfit=max(maxProfit,prices[j]-prices[i])
        }
      }
     return maxProfit;
    }

//approach:2 using an array which store maximum profit till now from the end[TC:o(n), sc:o(n)]
//[7,6,6,6,6,4]-[7,1,5,3,6,4]..find the maxim

  int maxProfit(vector<int>& prices) {
    int v[prices.size()];
            v[prices.size()-1]=prices[prices.size()-1];
            for(int i=prices.size()-1;i>0;i--)
            {
                v[i-1]=max(prices[i],v[i]);
            }
            int maxProfit=0;
            for(int i=0;i<prices.size();i++){
                    maxProfit=max(maxProfit,v[i]-prices[i]);
              }
             return maxProfit;
    }

//approach:3 using two variable stores maxprofit and minimum till now[TC:0(n), sc:0(1)]
int maxProfit(vector<int>& prices) {
        int minSoFar=prices[0];
        int maxProfit=0;
        for(int i=0;i<prices.size();i++)
        {
            minSoFar=min(minSoFar,prices[i]);
            maxProfit=max(maxProfit,prices[i]-minSoFar);
        }
        return maxProfit;
    }


//problem2:any number of transaction 

/*Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.*/
//approach
//[Tc:o(n), sc:o(1)]

int maxProfit(vector<int>& prices) {
        int profit=0;
        for(int i=1;i<prices.size();i++){
            if(prices[i]>prices[i-1])
                profit+=prices[i]-prices[i-1];
        }
        return profit;
    }
    
 //problem3:k transaction
 
